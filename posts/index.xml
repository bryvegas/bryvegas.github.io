<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Bry&#39;s Blog</title>
		<link>https://bryvegas.github.io/posts/</link>
		<description>Recent content in Posts on Bry&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 22 Aug 2022 11:10:33 +0800</lastBuildDate>
		<atom:link href="https://bryvegas.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>搭建 Substrate 开发环境</title>
			<link>https://bryvegas.github.io/posts/substrate-install-and-run/</link>
			<pubDate>Mon, 22 Aug 2022 11:10:33 +0800</pubDate>
			
			<guid>https://bryvegas.github.io/posts/substrate-install-and-run/</guid>
			<description>Substrate 介绍 Substrate 是由德国 Parity 公司推出的一个区块链构建框架。它实现了区块链开发领域中所遇到的大部分通用功能，比如点对点网络连接，可配置的共识算法，常用加密算法，数据库存储，交易管理等。通过使用 Substrate，软件开发人员可以在短时间内建立一条属于自己的完整区块链，开发者只需要关注自己的业务逻辑，从底层复杂的技术中解放出来。 使用 Substrate 构建的区块链，有一个额外的好处，即可以轻易地连接到 Parity 的 Polkadot 公链网络，这一网络具有很多优势，比如跨链交易、共享安全等。 Substrate 是由 Rust 语言开发，而 Rust 最为一门高级静态编程语言，具有诸多优势，如内存安全、类型检查、支持编译为 WASM、函数式友好、社区资料完善等优点。通过借助 Rust 的优良特性，也使得 Substrate 的性能优良、可读性高。
Substarte 和 Substrate-node-template 区别 Substrate 是将核心框架从 Polkadot 里边抽出来，让通用功能打包出来独立运行。substrate-node-template 则是将 Subtrate 的底层实现细节剥离出来，让开发者可以集中精力关注自己开发的应用程序及相关的配置。
两者的关系可以简单理解为：substrate-node-template 是 substrate 的亲儿子，波卡 polkadot 的亲孙子。 从代码复杂程度看，Polkadot &amp;gt; Substrate &amp;gt; substrate-node-template。
substrate-node-template 只留下了开发者开发需要用到的文件，其它的都通过依赖清单和调用一笔带过了。举个例子，Substrate 源代码项目里有很多实现好的功能，比如资产管理、智能合约等，如果用 substarte-node-template 编写自己的应用程序时要用到的话，只需轻松地在cargo.toml里引入依赖，在 runtime 运行配置清单里告诉下大家需要使用它，然后就可以调用这些功能了。项目结构精简了很多，目的也很明确：开发者只管知道怎么用就行了，其它不需要操心。就好比用电脑的人，不需要关心操作系统底层是怎么运行的，他只需要知道我做什么事情用什么软件就可以了。
搭建开发环境 安装方式有两种：一种是使用官方提供的自动安装脚本，另一种是手动安装。这里推荐前者，一键将需要的软件和各种依赖都安装完成，等没必要花太多时间在安装环节。 官网安装文档点这里。
官方脚本自动安装（推荐） $ curl https://getsubstrate.io -sSf | bash -s -- --fast 访问 https://getsubstrate.io 查看脚本详情。 脚本安装依赖包括： openssl（密码学库）、cmake（编译工具）、 llvm（编译器框架）、Rust等。</description>
			<content type="html"><![CDATA[<h2 id="substrate-介绍">Substrate 介绍</h2>
<p>Substrate 是由德国 Parity 公司推出的一个区块链构建框架。它实现了区块链开发领域中所遇到的大部分通用功能，比如点对点网络连接，可配置的共识算法，常用加密算法，数据库存储，交易管理等。通过使用 Substrate，软件开发人员可以在短时间内建立一条属于自己的完整区块链，开发者只需要关注自己的业务逻辑，从底层复杂的技术中解放出来。<!-- raw HTML omitted -->
使用 Substrate 构建的区块链，有一个额外的好处，即可以轻易地连接到 Parity 的 Polkadot 公链网络，这一网络具有很多优势，比如跨链交易、共享安全等。<!-- raw HTML omitted -->
Substrate 是由 Rust 语言开发，而 Rust 最为一门高级静态编程语言，具有诸多优势，如内存安全、类型检查、支持编译为 WASM、函数式友好、社区资料完善等优点。通过借助 Rust 的优良特性，也使得 Substrate 的性能优良、可读性高。</p>
<h2 id="substarte-和-substrate-node-template-区别">Substarte 和 Substrate-node-template 区别</h2>
<p><strong>Substrate</strong> 是将核心框架从 Polkadot 里边抽出来，让通用功能打包出来独立运行。<strong>substrate-node-template</strong> 则是将 Subtrate 的底层实现细节剥离出来，让开发者可以集中精力关注自己开发的应用程序及相关的配置。</p>
<p>两者的关系可以简单理解为：substrate-node-template 是 substrate 的亲儿子，波卡 polkadot 的亲孙子。<!-- raw HTML omitted -->
从代码复杂程度看，Polkadot &gt; Substrate &gt; substrate-node-template。</p>
<blockquote>
<p>substrate-node-template 只留下了开发者开发需要用到的文件，其它的都通过依赖清单和调用一笔带过了。举个例子，Substrate 源代码项目里有很多实现好的功能，比如资产管理、智能合约等，如果用 substarte-node-template 编写自己的应用程序时要用到的话，只需轻松地在<code>cargo.toml</code>里引入依赖，在 runtime 运行配置清单里告诉下大家需要使用它，然后就可以调用这些功能了。项目结构精简了很多，目的也很明确：开发者只管知道怎么用就行了，其它不需要操心。就好比用电脑的人，不需要关心操作系统底层是怎么运行的，他只需要知道我做什么事情用什么软件就可以了。</p>
</blockquote>
<h2 id="搭建开发环境">搭建开发环境</h2>
<p>安装方式有两种：一种是使用官方提供的自动安装脚本，另一种是手动安装。这里推荐前者，一键将需要的软件和各种依赖都安装完成，等没必要花太多时间在安装环节。<!-- raw HTML omitted -->
官网安装文档<a href="https://docs.substrate.io/install/">点这里</a>。</p>
<h3 id="官方脚本自动安装推荐">官方脚本自动安装（推荐）</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl https://getsubstrate.io -sSf <span class="p">|</span> bash -s -- --fast
</span></span></code></pre></div><blockquote>
<p>访问 <a href="https://getsubstrate.io">https://getsubstrate.io</a> 查看脚本详情。<!-- raw HTML omitted -->
脚本安装依赖包括： openssl（密码学库）、cmake（编译工具）、 llvm（编译器框架）、Rust等。</p>
</blockquote>
<p><strong>我自己在 Ubuntu22.04 环境下，提前使用阿里云软件源更新了系统，然后在较稳定的网络环境执行该自动安装脚本，最后顺利安装完毕。</strong>
<figure><img src="https://p.qlogo.cn/qqmail_head/PiajxSqBRaEKibHiba6p3FjicqPP9LblrsZyWFYtHYY0Hbiciaoc8VuBpdyWcBpVHEC6WHHTN0Va84444/0"
         alt="image"/>
</figure>
</p>
<figure><img src="https://p.qlogo.cn/qqmail_head/PiajxSqBRaEKibHiba6p3FjicqPP9LblrsZyWFYtHYY0Hb8MCEMGWNUBkib9YJbaxqHgvvM0JdpHSbSg/0"
         alt="image"/>
</figure>

<h3 id="手动安装">手动安装</h3>
<p>略，参考<a href="https://docs.substrate.io/install/">官网安装文档</a>。</p>
<h2 id="编译-substrate">编译 substrate</h2>
<blockquote>
<p>实际学习时，仅编译 substrate-node-template 即可，二者区别前面有说明。<!-- raw HTML omitted --></p>
</blockquote>
<p><strong>下载 Substrate 代码</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone https://github.com/paritytech/substrate.git
</span></span></code></pre></div><p><strong>编译 Substrate</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">cd</span> substrate
</span></span><span class="line"><span class="cl"><span class="c1"># $ SKIP_WASM_BUILD=1 cargo build --release</span>
</span></span><span class="line"><span class="cl">$ cargo build --release
</span></span></code></pre></div><blockquote>
<p>SKIP_WASM_BUILD=1 表示编译时跳过 wasm 编译构建版本，直接使用 native 的版本，从而节省编译时间。<!-- raw HTML omitted --></p>
</blockquote>
<p>出现如下提示，表示编译完成。（编译速度非常慢，建议闲暇时间进行）
<figure><img src="https://p.qlogo.cn/qqmail_head/C6nnRGnPbvwlVslNHxDtemvOjTjEDAZ1pTfX6YEldQNGC2pf93j4axY1tAko9vEic7EPLLrzPlFI/0"
         alt="image"/>
</figure>
</p>
<p><strong>编译完成后，会生成 Substrate 可执行文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/home/amesy/Documents/Code/Rust/substrate
</span></span><span class="line"><span class="cl">$ ls -l target/release/substrate
</span></span><span class="line"><span class="cl">-rwxrwxr-x <span class="m">2</span> amesy amesy <span class="m">88242168</span>  8月  <span class="m">4</span> 12:49 target/release/substrate
</span></span></code></pre></div><h3 id="运行-substrate-节点网络">运行 substrate 节点网络</h3>
<blockquote>
<p>substrate用很多个命令（参数），可使用<code>./target/release/substrate --help</code>查看用法。</p>
</blockquote>
<p><strong>这里使用参数 &ndash;dev 以开发者模式运行节点网络</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./target/release/substrate --dev
</span></span></code></pre></div><p>substrate 启动后，会输出如：当前的客户端版本，节点名，数据库目录，节点身份ID等等。
<figure><img src="https://p.qlogo.cn/qqmail_head/C6nnRGnPbvwlVslNHxDtemvOjTjEDAZ1pTfX6YEldQMO2Lq4LpLybLGMHK1OE1CDW9e5ZJkj1l8/0"
         alt="image"/>
</figure>
</p>
<h2 id="编译-substrate-node-template">编译 substrate-node-template</h2>
<blockquote>
<p>substrate-node-template 的编译方式跟上面编译 Substrate 时基本一致，具体参考官网文档，此处不再详述。</p>
</blockquote>
<p><strong>出现如下提示，表示编译完成。（编译速度非常慢，建议闲暇时间进行）</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 66m 26s
</span></span></code></pre></div><p><strong>通过运行以下命令查看预定义Alice开发帐户的帐户信息</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./target/release/node-template key inspect //Alice
</span></span></code></pre></div><figure><img src="https://p.qlogo.cn/qqmail_head/PiajxSqBRaEKibHiba6p3FjicqPP9LblrsZyWFYtHYY0Hb9rqIZFHVyGHib9aIjn61w5JKibnIj1sOHtI/0"
         alt="image"/>
</figure>

<h2 id="运行节点">运行节点</h2>
<p><strong>通过该命令以开发模式启动节点</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./target/release/node-template --dev
</span></span></code></pre></div><h2 id="安装前端模板">安装前端模板</h2>
<p>略，参考<a href="https://docs.substrate.io/tutorials/get-started/build-local-blockchain/">官网安装文档</a>。</p>
<blockquote>
<p>执行某些前端工具命令时，需要通过 sudo 获取 root 权限来执行，否则可能会报错。</p>
</blockquote>
<h2 id="启动前端模板服务">启动前端模板服务</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo yarn start
</span></span></code></pre></div><p>浏览器访问模板服务：<a href="http://localhost:8000">http://localhost:8000</a></p>
<figure><img src="https://p.qlogo.cn/qqmail_head/PiajxSqBRaEKibHiba6p3FjicqPP9LblrsZyWFYtHYY0Hb8SsBE0yHjJhqML43kQCPPgr5s06oHuUZc/0"
         alt="image"/>
</figure>

<p>可以看到 CURRENT BLOCK 跟服务端的出块数目基本保持同步。</p>
<h2 id="总结">总结</h2>
<ul>
<li>substrate-node-template 是将 Subtrate 的底层实现细节剥离出来，让开发者可以集中精力关注自己开发的应用程序及相关的配置。所以日常开发应该使用 substrate-node-template。</li>
<li>官网文档提供了非常详细的安装步骤，安装时建议仔细阅读。</li>
<li>安装过程只要确保网络畅通，加上足够的耐心，基本都能顺利安装完成。</li>
<li>Substrate 节点服务和前端模板服务需要区分启动顺序，即 Substrate 节点服务先启动，前端模板服务后启动，否则可能会报错：<code>Error Connecting to Substrate</code>。</li>
</ul>
<p>(完)</p>
]]></content>
		</item>
		
	</channel>
</rss>
